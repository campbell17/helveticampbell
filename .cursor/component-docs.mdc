---
description: 
globs: 
alwaysApply: false
---
# Component Documentation References

## HeadlessUI Reference
Base URL: https://headlessui.com/
Version: v2.1
React Components Documentation: https://headlessui.com/react

When implementing HeadlessUI components:
- ALWAYS check component documentation for built-in props and functionality BEFORE implementing custom solutions
- Never reinvent functionality that exists natively in the component (e.g., use `anchor` prop for positioning instead of custom CSS)
- Always use the latest documented import patterns (e.g., use `MenuButton` instead of `Menu.Button`)
- Always check the component-specific documentation (e.g., https://headlessui.com/react/menu for Menu components)
- Use the official examples as starting points
- Follow the documented patterns for state management
- Utilize built-in attributes (data-* attributes) over custom solutions
- Reference the component API tables for available props and render props
- Use the documented keyboard interaction patterns
- Follow the accessibility patterns provided

## General Documentation Guidelines
1. Always check official documentation first:
   - React/Next.js docs for core functionality
   - HeadlessUI for UI components
   - Tailwind CSS for styling patterns
   - Framer Motion for animations
   
2. Documentation Priorities:
   - Official docs over blog posts or tutorials
   - Latest version documentation over older versions
   - Latest documented patterns over deprecated ones
   - Latest import methods over nested properties
   - Accessibility guidelines from component libraries
   - TypeScript types from official definitions

3. When Implementing Components:
   - Check for built-in state management
   - Use documented data attributes
   - Follow keyboard navigation patterns
   - Implement proper accessibility features
   - Use official examples as reference
   - Never use deprecated patterns even if they still work
   - Always use named imports instead of nested properties when available
   - Check the "Basic example" section first for the canonical way to implement

## Debugging Best Practices
1. When debugging components or functionality:
   - NEVER revert to older/deprecated methods even temporarily
   - Always stick with the latest documented approach
   - If the latest method isn't working, investigate why rather than trying older methods
   - Document any workarounds needed for the latest methods
   - If a latest method truly doesn't work, escalate to library maintainers rather than reverting
   - Keep a consistent approach throughout the debugging process